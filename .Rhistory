rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
rstan::extract(fit, pars = "cl")
rstan::stan_rhat(fit)
library
library(shinystan)
launch_shinystan(fit)
stan_rhat
extract(fit, pars="rhat")
?extract
temp <- extract(fit)
?extract
rhat_neff_mcse_hist
?stan_rhat
summary(fit)$summary[,"Rhat"]
summary(fit)$summary[,"Rhat"]   %>% str()
summary(fit)$summary[,"Rhat"]   %>% hist()
summary(fit)$summary[,"Rhat"]   %>% hist(breaks = 100)
summary(fit)$summary[,"Rhat"]   %>% hist(breaks = 10000)
summary(fit)$summary[,"Rhat"]   %>% max()
summary(fit)$summary[,"Rhat"]   %>% max(na.rm = T)
filename <- paste0("data/sparse/sem_data_", 40, ".csv")
current_data <- read.csv(eval(filename))
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 13, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 13, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5)
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 16, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5)
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 16, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 26, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 32, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
launch_shinystan(fit)
set.seed(456789)
# read in data
filename <- paste0("data/sparse/sem_data_", 43, ".csv")
current_data <- read.csv(eval(filename))
# prep data for stan
stan_dat <- list(N = 200,
P = 15,
D = 3,
C = 30,
X = as.matrix(current_data)
)
# fit model
fit <- stan(file = 'models/sem_cl_lasso_reparam.stan', data = stan_dat,
iter = 2000, chains = 3, thin = 5,
control = list(adapt_delta = 0.999))
ind_gauss <- read.csv("sim_results/independant_gaus.csv")
ind_hs <- read.csv("sim_results/independant_hs.csv")
ind_hs_plus <- read.csv("sim_results/independant_hsplus.csv")
ind_no_cl <- read.csv("sim_results/independant_no_cl.csv")
ind_long_gauss_dens <- melt(ind_gauss[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
ind_long_hs_dens <- melt(ind_hs[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
ind_long_hs_plus_dens <- melt(ind_hs_plus[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
library(dplyr)
library(reshape2)
library(ggplot2)
library(GGally)
library(ggthemes)
library(lme4)
library(sjPlot)
library(arm)
ind_long_gauss_dens <- melt(ind_gauss[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
ind_long_hs_dens <- melt(ind_hs[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
ind_long_hs_plus_dens <- melt(ind_hs_plus[,1:30]) %>%
group_by(variable) %>%
summarise(med = median(value),
low_025 = quantile(value, .025),
high_975 = quantile(value, .975))
ggplot(ind_long_gauss_dens, aes(x = med, y = variable)) +
geom_point(size = 2) +
geom_errorbarh(aes(xmin = ind_long_gauss_dens$low_025,
xmax = ind_long_gauss_dens$high_975,
height = 0)) +
theme_tufte() +
xlim(c(-.5, .5)) +
geom_vline(xintercept = c(-.5, -.25, 0, .25, .5), colour="grey") +
ggtitle("Independant Gauss Density Plot")
ind_param_num <- data.frame(no_cl = ind_no_cl  %>% dplyr::select(p_loo),
gauss = ind_gauss  %>% dplyr::select(p_loo),
hs = ind_hs  %>% dplyr::select(p_loo),
hs_plus = ind_hs_plus  %>% dplyr::select(p_loo))
# name columns
names(ind_param_num) <- c("no_cl", "gauss", "hs", "hs_plus")
# model number for multi-level model
ind_param_num$model_num <- 1:100
ind_param_long <- ind_param_num %>%
melt(id.vars = 'model_num')
# multi-level model testing difference in number of parameters
ind_basic_param_model <- lmer(value ~ -1 + (1 | model_num), data = ind_param_long)
ind_test_param_model <- lmer(value ~ -1 + variable + (1 | model_num), data = ind_param_long)
# consistent difference in fit by models
anova(ind_basic_param_model, ind_test_param_model)
ind_param_numbers <- fixef(ind_test_param_model)
ind_param_numbers_se <- se.fixef(ind_test_param_model)
ind_param_number_plot <- as.data.frame(cbind(ind_param_numbers, ind_param_numbers_se))
ind_param_number_plot$models <- row.names(ind_param_number_plot)
ggplot(ind_param_number_plot, aes(x = models, y = ind_param_numbers)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_param_number_plot$ind_param_numbers -
1.96*ind_param_number_plot$ind_param_numbers_se,
ymax = ind_param_number_plot$ind_param_numbers +
1.96*ind_param_number_plot$ind_param_numbers_se),
width = .2) +
coord_flip() +
theme_tufte() +
geom_hline(yintercept = c(420, 430, 440, 450), colour="grey") +
ylim(c(420, 455))
ggplot(ind_param_number_plot, aes(x = models, y = ind_param_numbers)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_param_number_plot$ind_param_numbers -
1.96*ind_param_number_plot$ind_param_numbers_se,
ymax = ind_param_number_plot$ind_param_numbers +
1.96*ind_param_number_plot$ind_param_numbers_se),
width = .2) +
coord_flip() +
theme_tufte() +
geom_hline(yintercept = c(420, 430, 440, 450), colour="grey") +
ylim(c(420, 455)) +
ggtitle("Independant Model - Estimated Number of Parameters")
ind_fit <- data.frame(no_cl = ind_no_cl  %>% dplyr::select(elpd_loo),
gauss = ind_gauss  %>% dplyr::select(elpd_loo),
hs = ind_hs  %>% dplyr::select(elpd_loo),
hs_plus = ind_hs_plus %>% dplyr::select(elpd_loo))
# name columns
names(ind_fit) <- c("no_cl", "gauss", "hs", "hs_plus")
# model number for multi-level model
ind_fit$model_num <- 1:100
# make long for use and put values on IC scale(*-2)
ind_fit_long <- ind_fit %>%
melt(id.vars = 'model_num') %>%
mutate(value = value * -2)
# multi-level model testing difference in fit
ind_basic_loo_model <- lmer(value ~ 1 + (1 | model_num), data = ind_fit_long)
ind_test_loo_model <- lmer(value ~ 1 + variable + (1 | model_num), data = ind_fit_long)
# consistent difference in fit by models
anova(ind_basic_loo_model, ind_test_loo_model)
# plot fixed effect estimates from loo_model
sjp.lmer(ind_test_loo_model, type = "fe.std", sort.coef = T, showPValueLabels = F)
# extract fixed effect values and SEs for model fit chart
ind_model_fit <- fixef(ind_test_loo_model)
ind_model_fit_se <- se.fixef(ind_test_loo_model)
ind_model_fit_plot <- as.data.frame(cbind(ind_model_fit, ind_model_fit_se))
ind_model_fit_plot$models <- row.names(ind_model_fit_plot)
ind_model_fit_plot <- ind_model_fit_plot %>% filter(models != "(Intercept)")
# plot model fit
ggplot(ind_model_fit_plot, aes(x = models, y = ind_model_fit)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_model_fit_plot$ind_model_fit -
1.96*ind_model_fit_plot$ind_model_fit_se,
ymax = ind_model_fit_plot$ind_model_fit +
1.96*ind_model_fit_plot$ind_model_fit_se),
width = .2) +
coord_flip() +
theme_tufte() +
geom_hline(yintercept = c(0, 10, 20, 30), colour="grey") +
ggtitle("Independant Model LOO Effect Sizes")
ind_test_loo_model <- lmer(value ~ -1 + variable + (1 | model_num), data = ind_fit_long)
ind_basic_loo_model <- lmer(value ~ -1 + (1 | model_num), data = ind_fit_long)
anova(ind_basic_loo_model, ind_test_loo_model)
sjp.lmer(ind_test_loo_model, type = "fe.std", sort.coef = T, showPValueLabels = F)
ind_model_fit <- fixef(ind_test_loo_model)
ind_model_fit_se <- se.fixef(ind_test_loo_model)
ind_model_fit_plot <- as.data.frame(cbind(ind_model_fit, ind_model_fit_se))
ind_model_fit_plot$models <- row.names(ind_model_fit_plot)
ind_model_fit_plot <- ind_model_fit_plot %>% filter(models != "(Intercept)")
# plot model fit
ggplot(ind_model_fit_plot, aes(x = models, y = ind_model_fit)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_model_fit_plot$ind_model_fit -
1.96*ind_model_fit_plot$ind_model_fit_se,
ymax = ind_model_fit_plot$ind_model_fit +
1.96*ind_model_fit_plot$ind_model_fit_se),
width = .2) +
coord_flip() +
theme_tufte() +
geom_hline(yintercept = c(0, 10, 20, 30), colour="grey") +
ggtitle("Independant Model LOO Effect Sizes")
ggplot(ind_model_fit_plot, aes(x = models, y = ind_model_fit)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_model_fit_plot$ind_model_fit -
1.96*ind_model_fit_plot$ind_model_fit_se,
ymax = ind_model_fit_plot$ind_model_fit +
1.96*ind_model_fit_plot$ind_model_fit_se),
width = .2) +
coord_flip() +
theme_tufte() +
#geom_hline(yintercept = c(0, 10, 20, 30), colour="grey") +
ggtitle("Independant Model LOO Effect Sizes")
ind_basic_loo_model <- lmer(value ~ 1 + (1 | model_num), data = ind_fit_long)
ind_test_loo_model <- lmer(value ~ 1 + variable + (1 | model_num), data = ind_fit_long)
# consistent difference in fit by models
anova(ind_basic_loo_model, ind_test_loo_model)
ind_model_fit <- fixef(ind_test_loo_model)
ind_model_fit_se <- se.fixef(ind_test_loo_model)
ind_model_fit_plot <- as.data.frame(cbind(ind_model_fit, ind_model_fit_se))
ind_model_fit_plot$models <- row.names(ind_model_fit_plot)
ind_model_fit_plot <- ind_model_fit_plot %>% filter(models != "(Intercept)")
# plot model fit
ggplot(ind_model_fit_plot, aes(x = models, y = ind_model_fit)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_model_fit_plot$ind_model_fit -
1.96*ind_model_fit_plot$ind_model_fit_se,
ymax = ind_model_fit_plot$ind_model_fit +
1.96*ind_model_fit_plot$ind_model_fit_se),
width = .2) +
coord_flip() +
theme_tufte() +
#geom_hline(yintercept = c(0, 10, 20, 30), colour="grey") +
ggtitle("Independant Model LOO Effect Sizes")
ggplot(ind_model_fit_plot, aes(x = models, y = ind_model_fit)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = ind_model_fit_plot$ind_model_fit -
1.96*ind_model_fit_plot$ind_model_fit_se,
ymax = ind_model_fit_plot$ind_model_fit +
1.96*ind_model_fit_plot$ind_model_fit_se),
width = .2) +
coord_flip() +
theme_tufte() +
geom_hline(yintercept = c(0, 10, 20, 30), colour="grey") +
ggtitle("Independant Model LOO Effect Sizes")
rm(list=ls())
library(lavaan)
library(rstan)
library(loo)
data(HolzingerSwineford1939)
holz_dat <- HolzingerSwineford1939
str(holz_dat)
summary(holz_dat)
str(holz_dat)
rm(list=ls())
install.packages("open.mx")
install.packages("openMX")
install.packages("OpenMX")
install.packages("OpenMx")
library(OpenMx)
data(HS.ability.data)
holz_dat <- HS.ability.data
RM(HS.ability.data)
RM(HS.ability.data)
rm(HS.ability.data)
holz_dat %>% str()
?HS.ability.data
holz_dat <- HS.ability.data %>% select(-id,
-Gender)
data(HS.ability.data)
holz_dat <- HS.ability.data %>% select(-c(id,
Gender))
holz_dat <- HS.ability.data %>% select(-id,
Gender)
holz_dat <- HS.ability.data %>% select(id,
Gender)
library(dplyr)
holz_dat <- HS.ability.data %>% select('id',
'Gender')
holz_dat <- HS.ability.data %>%
dplyr::select(
-id,
-Gender)
holz_dat <- HS.ability.data %>%
dplyr::select(
-id, -Gender, -Grade, -agey, -agem,
-paperrev, -flagssub)
holz_dat <- HS.ability.data %>%
dplyr::select(
-id, -Gender, -grade, -agey, -agem,
-paperrev, -flagssub)
holz_dat <- HS.ability.data %>%
dplyr::select(
-id, -Gender, -grade, -agey, -agem,
-paperrev, -flagssub,
-deduct, -numeric, -problemr, -series, -arithmet)
rm(HS.ability.data)
str(holz_dat)
holz_dat  %>%  filter(school)  %>% summary()
holz_dat  %>%  filter(school)
holz_dat  %>%  select(school)  %>% summary()
holz_dat  %>%  dplyr::select(school)  %>% summary()
grant_dat <- holz_dat %>% filter(school == Grant-White)
grant_dat <- holz_dat %>% filter(school == 'Grant-White')
past_dat <- holz_dat %>% filter(school == 'Pasteur')
rm(holz_dat)
grant_dat[,-1] %>% str()
scale(grant_dat[,-1])
?scale
grant_dat[,-1] <- scale(grant_dat[,-1])
data(HS.ability.data)
holz_dat <- HS.ability.data %>%
dplyr::select(
-id, -Gender, -grade, -agey, -agem,
-paperrev, -flagssub,
-deduct, -numeric, -problemr, -series, -arithmet)
grant_dat <- holz_dat %>% filter(school == 'Grant-White')
past_dat <- holz_dat %>% filter(school == 'Pasteur')
rm(HS.ability.data) # clean work space
rm(holz_dat)
grant_dat_stand <- scale(grant_dat[,-1])
View(grant_dat_stand)
past_dat_stand <- scale(past_dat[,-1])
rm(HS.ability.data, holz_dat)
rm(HS.ability.data, holz_dat, grant_dat, past_dat)
View(grant_dat_stand)
typeof(grant_dat_stand)
typeof(grant_dat_stand  %>% as.matrix())
grant_dat_stand[1:5, 1:5]
grant_dat_stand == as.matrix(grant_dat_stand)
grant_dat_stand != as.matrix(grant_dat_stand) %>% sum()
sum(grant_dat_stand != as.matrix(grant_dat_stand))
stan_grant_dat <- list(N = 156,
P = 19,
D = 4,
C = 57,
X = grant_dat_stand
)
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3, chains = 3, thin = 3)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3, chains = 3, thin = 3)
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3)
library(shinystan)
launch_shinystan(fit_grant)
launch_shinystan(fit_grant)
# fit model
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3)
launch_shinystan(fit_grant)
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3)
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
adapt_delta = .9)
fit_grant <- stan(file = 'H&S analysis/models/H&S Gaussian.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.9))
launch_shinystan(fit_grant)
fit_grant <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.9))
fit_grant_hs <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 3, chains = 3, thin = 3,
control = list(adapt_delta = 0.9))
fit_grant_hs <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.9))
fit_grant_hs <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 1000, chains = 3, thin = 3,
control = list(adapt_delta = 0.99))
launch_shinystan(fit_grant_hs)
launch_shinystan(fit_grant)
fit_grant_hs_plus <- stan(file = 'H&S analysis/models/H&S horseshoe plus.stan',
data = stan_grant_dat,
iter = 3, chains = 3, thin = 3)
fit_grant_hs_plus <- stan(file = 'H&S analysis/models/H&S horseshoe plus.stan',
data = stan_grant_dat,
iter = 1000, chains = 3, thin = 3,
control = list(adapt_delta = 0.999))
launch_shinystan(fit_grant_hs_plus)
fit_grant_hs <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.99))
launch_shinystan(fit_grant_hs)
fit_grant_hs <- stan(file = 'H&S analysis/models/H&S horseshoe.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.999))
launch_shinystan(fit_grant_hs)
?saveRDS
saveRDS(fit_grant_hs, file = 'H&S analysis/models/fitted models/fitted H&S horseshoe.rds')
test <- readRDS('H&S analysis/models/fitted models/fitted H&S horseshoe.rds')
launch_shinystan(test)
launch_shinystan(fit_grant)
saveRDS(fit_grant, file = 'H&S analysis/models/fitted models/fitted H&S gaussian.rds')
fit_grant_hs_plus <- stan(file = 'H&S analysis/models/H&S horseshoe plus.stan',
data = stan_grant_dat,
iter = 3000, chains = 3, thin = 3,
control = list(adapt_delta = 0.999))
launch_shinystan(fit_grant_hs_plus)
launch_shinystan(fit_grant_hs_plus)
saveRDS(fit_grant_hs_plus, file = 'H&S analysis/models/fitted models/fitted H&S horseshoe plus.rds')
