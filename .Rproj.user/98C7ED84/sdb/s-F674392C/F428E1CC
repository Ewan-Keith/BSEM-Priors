{
    "contents" : "#### analysis of BSEM simulation results\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(ggthemes)\nlibrary(lme4)\nlibrary(sjPlot)\nlibrary(arm)\n\n# preset sjp options\nsjp.setTheme(base = theme_tufte())\n\n\n#### sparse case ####\n\n# read data\nsparse_gauss <- read.csv(\"sim_results/sparse_gaus.csv\")\nsparse_hs <- read.csv(\"sim_results/sparse_hs.csv\")\nsparse_hs_plus <- read.csv(\"sim_results/sparse_hs_plus.csv\")\nsparse_no_cl <- read.csv(\"sim_results/sparse_no_cl.csv\")\n\n# adjust for strange adjsutment you made during the simulations\nsparse_gauss <- sparse_gauss %>% \n  mutate(cl_6_discrepancy = (.6 - cl_6_discrepancy),\n         cl_15_discrepancy = (.2 - cl_15_discrepancy),\n         cl_26_discrepancy = (.4 - cl_26_discrepancy))\n\nsparse_hs <- sparse_hs %>% \n  mutate(cl_6_discrepancy = (.6 - cl_6_discrepancy),\n         cl_15_discrepancy = (.2 - cl_15_discrepancy),\n         cl_26_discrepancy = (.4 - cl_26_discrepancy))\n\nsparse_hs_plus <- sparse_hs_plus %>% \n  mutate(cl_6_discrepancy = (.6 - cl_6_discrepancy),\n         cl_15_discrepancy = (.2 - cl_15_discrepancy),\n         cl_26_discrepancy = (.4 - cl_26_discrepancy))\n\n\n#### produce long data for set of plots ####\n\nlong_gauss_dens <- melt(sparse_gauss[,1:30]) %>% \n  group_by(variable) %>% \n  summarise(med = median(value),\n            low_025 = quantile(value, .025),\n            high_975 = quantile(value, .975))\n\nlong_hs_dens <- melt(sparse_hs[,1:30]) %>% \n  group_by(variable) %>% \n  summarise(med = median(value),\n            low_025 = quantile(value, .025),\n            high_975 = quantile(value, .975))\n\nlong_hs_plus_dens <- melt(sparse_hs_plus[,1:30]) %>% \n  group_by(variable) %>% \n  summarise(med = median(value),\n            low_025 = quantile(value, .025),\n            high_975 = quantile(value, .975))\n\n\n## add on population values for non-zero parameters\n\npop_cl <- c(rep(NA, 5), \n            0.6, \n            rep(NA, 8),\n            0.2,\n            rep(NA, 10),\n            0.4,\n            rep(NA, 4))\n\nlong_gauss_dens <- cbind(long_gauss_dens, pop_cl)\nlong_hs_dens <- cbind(long_hs_dens, pop_cl)\nlong_hs_plus_dens <- cbind(long_hs_plus_dens, pop_cl)\n\n#### forest plots of median coefficient estimates ####\n\nggplot(long_gauss_dens, aes(x = med, y = variable)) +\n  geom_point(size = 2) +\n  geom_errorbarh(aes(xmin = long_gauss_dens$low_025, \n                xmax = long_gauss_dens$high_975,\n                height = 0)) +\n  theme_tufte() +\n  xlim(c(-1, 1)) +\n  geom_point(aes(x = pop_cl), shape = 5, size = 3) +\n  geom_vline(xintercept = c(-1, -.5, 0, .5, 1), colour=\"grey\") +\n  ggtitle(\"Sparse Gauss Density Plot\")\n\n\nggplot(long_hs_dens, aes(x = med, y = variable)) +\n  geom_point(size = 2) +\n  geom_errorbarh(aes(xmin = long_hs_dens$low_025, \n                     xmax = long_hs_dens$high_975,\n                     height = 0)) +\n  theme_tufte() +\n  xlim(c(-1, 1)) +\n  geom_point(aes(x = pop_cl), shape = 5, size = 3) +\n  geom_vline(xintercept = c(-1, -.5, 0, .5, 1), colour=\"grey\") +\n  ggtitle(\"Sparse horseshoe Density Plot\")\n\n\nggplot(long_hs_plus_dens, aes(x = med, y = variable)) +\n  geom_point(size = 2) +\n  geom_errorbarh(aes(xmin = long_hs_plus_dens$low_025, \n                     xmax = long_hs_plus_dens$high_975,\n                     height = 0)) +\n  theme_tufte() +\n  xlim(c(-1, 1)) +\n  geom_point(aes(x = pop_cl), shape = 5, size = 3) +\n  geom_vline(xintercept = c(-1, -.5, 0, .5, 1), colour=\"grey\") +\n  ggtitle(\"Sparse Horseshoe Plus Density Plot\")\n\n#### out of sample model fit comparison ####\n\n# prepare LOO fit data\nsparse_fit <- data.frame(no_cl = sparse_no_cl  %>% select(elpd_loo), \n                         gauss = sparse_gauss  %>% select(elpd_loo),\n                         hs = sparse_hs  %>% select(elpd_loo),\n                         hs_plus = sparse_hs_plus  %>% select(elpd_loo))\n\n# name columns\nnames(sparse_fit) <- c(\"no_cl\", \"gauss\", \"hs\", \"hs_plus\")\n\n# model number for multi-level model\nsparse_fit$model_num <- 1:100\n\n# make long for use and put values on IC scale(*-2)\nsparse_fit_long <- sparse_fit %>% \n  melt(id.vars = 'model_num') %>% \n  mutate(value = value * -2)\n\n# multi-level model testing difference in fit\nbasic_loo_model <- lmer(value ~ 1 + (1 | model_num), data = sparse_fit_long)\ntest_loo_model <- lmer(value ~ 1 + variable + (1 | model_num), data = sparse_fit_long)\n\n# consistent difference in fit by models\nanova(basic_loo_model, test_loo_model)\n\n# extract fixed effect values and SEs for model fit chart\n\nmodel_fit <- fixef(test_loo_model)\nmodel_fit_se <- se.fixef(test_loo_model)\n\nmodel_fit_plot <- as.data.frame(cbind(model_fit, model_fit_se))\nmodel_fit_plot$models <- row.names(model_fit_plot)\nmodel_fit_plot <- model_fit_plot %>% filter(models != \"(Intercept)\")\n\n# plot model fit\nggplot(model_fit_plot, aes(x = models, y = model_fit)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = model_fit_plot$model_fit - \n                      1.96*model_fit_plot$model_fit_se,\n                    ymax = model_fit_plot$model_fit + \n                      1.96*model_fit_plot$model_fit_se),\n                width = .2) +\n  coord_flip() +\n  theme_tufte() +\n  geom_hline(yintercept = c(-60, -40, -20, 0), colour=\"grey\") +\n  ylim(c(-60, 0)) +\n  ggtitle(\"Sparse Model LOO Effect Sizes\")\n\n\n#### LOO parameter number analysis ####\n\n# prepare p_LOO fit data\nsparse_param_num <- data.frame(no_cl = sparse_no_cl  %>% select(p_loo), \n                         gauss = sparse_gauss  %>% select(p_loo),\n                         hs = sparse_hs  %>% select(p_loo),\n                         hs_plus = sparse_hs_plus  %>% select(p_loo))\n\n# name columns\nnames(sparse_param_num) <- c(\"no_cl\", \"gauss\", \"hs\", \"hs_plus\")\n\n# model number for multi-level model\nsparse_param_num$model_num <- 1:100\n\n# make long for use \nsparse_param_long <- sparse_param_num %>% \n  melt(id.vars = 'model_num')\n\n# multi-level model testing difference in number of parameters\nbasic_param_model <- lmer(value ~ -1 + (1 | model_num), data = sparse_param_long)\ntest_param_model <- lmer(value ~ -1 + variable + (1 | model_num), data = sparse_param_long)\n\n# consistent difference in fit by models\nanova(basic_param_model, test_param_model)\n\n# extract fixed effect values and SEs for bar chart\n\nparam_numbers <- fixef(test_param_model)\nparam_numbers_se <- se.fixef(test_param_model)\n\nparam_number_plot <- as.data.frame(cbind(param_numbers, param_numbers_se))\nparam_number_plot$models <- row.names(param_number_plot)\n\n# plot parameter numbers\nggplot(param_number_plot, aes(x = models, y = param_numbers)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = param_number_plot$param_numbers - \n                       1.96*param_number_plot$param_numbers_se,\n                     ymax = param_number_plot$param_numbers + \n                       1.96*param_number_plot$param_numbers_se),\n                width = .2) +\n  coord_flip() +\n  theme_tufte() +\n  geom_hline(yintercept = c(420, 430, 440, 450), colour=\"grey\") +\n  ylim(c(420, 455)) +\n  ggtitle(\"Sparse Model - Estimated Number of Parameters\")\n\n\n\n\n\n\n\n\n",
    "created" : 1468162451701.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4090239505",
    "id" : "F428E1CC",
    "lastKnownWriteTime" : 1468269729,
    "path" : "~/GitHub/BSEM Priors/results_analysis.R",
    "project_path" : "results_analysis.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}